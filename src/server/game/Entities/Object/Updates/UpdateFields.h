/*
 * This file is part of the TrinityCore Project. See AUTHORS file for Copyright information
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UpdateFields_h__
#define UpdateFields_h__

#include "EnumFlag.h"
#include "MythicPlusPacketsCommon.h"
#include "ObjectGuid.h"
#include "Position.h"
#include "QuaternionData.h"
#include "UpdateField.h"
#include "UpdateMask.h"

// This file is automatically generated, DO NOT EDIT

class AreaTrigger;
class AzeriteEmpoweredItem;
class AzeriteItem;
class Bag;
class ByteBuffer;
class Conversation;
class Corpse;
class DynamicObject;
class GameObject;
class Item;
class Object;
class Player;
class Unit;

namespace UF
{
struct ObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> EntryID;
    struct EntryIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 2> DynamicFlags;
    struct DynamicFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<float, 0, 3> Scale;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemEnchantment : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ID;
    UpdateField<uint32, 0, 2> Duration;
    UpdateField<int16, 0, 3> Charges;
    UpdateField<uint16, 0, 4> Inactive;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemMod : public IsUpdateFieldStructureTag
{
    int32 Value;
    uint8 Type;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ItemMod const& right) const;
    bool operator!=(ItemMod const& right) const { return !(*this == right); }
};

struct ItemModList : public IsUpdateFieldStructureTag, public HasChangesMask<1>
{
    DynamicUpdateField<UF::ItemMod, 0, 0> Values;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArtifactPower : public IsUpdateFieldStructureTag
{
    int16 ArtifactPowerID;
    uint8 PurchasedRank;
    uint8 CurrentRankWithBonus;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ArtifactPower const& right) const;
    bool operator!=(ArtifactPower const& right) const { return !(*this == right); }
};

struct SocketedGem : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint8, 0, 2> Context;
    UpdateFieldArray<uint16, 16, 3, 4> BonusListIDs;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemData : public IsUpdateFieldStructureTag, public HasChangesMask<43>
{
    UpdateField<std::vector<int32>, 0, 1> BonusListIDs;
    DynamicUpdateField<UF::ArtifactPower, 0, 1> ArtifactPowers;
    DynamicUpdateField<UF::SocketedGem, 0, 2> Gems;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> ContainedIn;
    UpdateField<ObjectGuid, 0, 5> Creator;
    UpdateField<ObjectGuid, 0, 6> GiftCreator;
    UpdateField<uint32, 0, 7> StackCount;
    UpdateField<uint32, 0, 8> Expiration;
    UpdateField<uint32, 0, 9> DynamicFlags;
    UpdateField<uint32, 0, 10> Durability;
    UpdateField<uint32, 0, 11> MaxDurability;
    UpdateField<uint32, 0, 12> CreatePlayedTime;
    UpdateField<int32, 0, 13> Context;
    UpdateField<int64, 0, 14> CreateTime;
    UpdateField<uint64, 0, 15> ArtifactXP;
    UpdateField<uint8, 0, 16> ItemAppearanceModID;
    UpdateField<UF::ItemModList, 0, 17> Modifiers;
    UpdateField<uint32, 0, 18> DynamicFlags2;
    UpdateField<int32, 0, 19> Unkdf1;
    UpdateField<int32, 0, 20> Unkdf2;
    UpdateField<int32, 0, 21> Unkdf3;
    UpdateField<uint16, 0, 22> DEBUGItemLevel;
    UpdateFieldArray<int32, 5, 23, 24> SpellCharges;
    UpdateFieldArray<UF::ItemEnchantment, 13, 29, 30> Enchantment;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Item const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ContainerData : public IsUpdateFieldStructureTag, public HasChangesMask<39>
{
    UpdateField<uint32, 0, 1> NumSlots;
    UpdateFieldArray<ObjectGuid, 36, 2, 3> Slots;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Bag const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AzeriteEmpoweredItemData : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateFieldArray<int32, 5, 0, 1> Selections;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteEmpoweredItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteEmpoweredItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AzeriteEmpoweredItem const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct UnlockedAzeriteEssence : public IsUpdateFieldStructureTag
{
    uint32 AzeriteEssenceID;
    uint32 Rank;

    void WriteCreate(ByteBuffer& data, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AzeriteItem const* owner, Player const* receiver) const;
    bool operator==(UnlockedAzeriteEssence const& right) const;
    bool operator!=(UnlockedAzeriteEssence const& right) const { return !(*this == right); }
};

struct SelectedAzeriteEssences : public IsUpdateFieldStructureTag, public HasChangesMask<8>
{
    UpdateField<bool, 0, 1> Enabled;
    UpdateField<uint32, 0, 2> SpecializationID;
    UpdateFieldArray<uint32, 4, 3, 4> AzeriteEssenceID;

    void WriteCreate(ByteBuffer& data, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AzeriteItem const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AzeriteItemData : public IsUpdateFieldStructureTag, public HasChangesMask<10>
{
    UpdateField<bool, 0, 1> Enabled;
    DynamicUpdateField<UF::UnlockedAzeriteEssence, 0, 2> UnlockedEssences;
    DynamicUpdateField<uint32, 0, 4> UnlockedEssenceMilestones;
    DynamicUpdateField<UF::SelectedAzeriteEssences, 0, 3> SelectedEssences;
    UpdateField<uint64, 0, 5> Xp;
    UpdateField<uint32, 0, 6> Level;
    UpdateField<uint32, 0, 7> AuraLevel;
    UpdateField<uint32, 0, 8> KnowledgeLevel;
    UpdateField<int32, 0, 9> DEBUGknowledgeWeek;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AzeriteItem const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct SpellCastVisual : public IsUpdateFieldStructureTag
{
    int32 SpellXSpellVisualID;
    int32 ScriptVisualID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(SpellCastVisual const& right) const;
    bool operator!=(SpellCastVisual const& right) const { return !(*this == right); }
};

struct UnitChannel : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    UF::SpellCastVisual SpellVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(UnitChannel const& right) const;
    bool operator!=(UnitChannel const& right) const { return !(*this == right); }
};

struct VisibleItem : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<int32, 0, 2> SecondaryItemModifiedAppearanceID;
    UpdateField<uint16, 0, 3> ItemAppearanceModID;
    UpdateField<uint16, 0, 4> ItemVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PassiveSpellHistory : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 AuraSpellID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(PassiveSpellHistory const& right) const;
    bool operator!=(PassiveSpellHistory const& right) const { return !(*this == right); }
};

struct UnitData : public IsUpdateFieldStructureTag, public HasChangesMask<200>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<UF::PassiveSpellHistory, 0, 2> PassiveSpells;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    DynamicUpdateField<ObjectGuid, 0, 4> ChannelObjects;
    UpdateField<int32, 0, 5> DisplayID;
    struct DisplayIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 6> StateSpellVisualID;
    UpdateField<uint32, 0, 7> StateAnimID;
    UpdateField<uint32, 0, 8> StateAnimKitID;
    UpdateField<uint32, 0, 9> StateWorldEffectsQuestObjectiveID;
    UpdateField<int32, 0, 10> SpellOverrideNameID;
    UpdateField<ObjectGuid, 0, 11> Charm;
    UpdateField<ObjectGuid, 0, 12> Summon;
    UpdateField<ObjectGuid, 0, 13> Critter;
    UpdateField<ObjectGuid, 0, 14> CharmedBy;
    UpdateField<ObjectGuid, 0, 15> SummonedBy;
    UpdateField<ObjectGuid, 0, 16> CreatedBy;
    UpdateField<ObjectGuid, 0, 17> DemonCreator;
    UpdateField<ObjectGuid, 0, 18> LookAtControllerTarget;
    UpdateField<ObjectGuid, 0, 19> Target;
    UpdateField<ObjectGuid, 0, 20> BattlePetCompanionGUID;
    UpdateField<uint64, 0, 21> BattlePetDBID;
    UpdateField<UF::UnitChannel, 0, 22> ChannelData;
    UpdateField<uint8, 0, 23> UnkDFByte;
    UpdateField<uint32, 0, 24> SummonedByHomeRealm;
    UpdateField<uint8, 0, 25> Race;
    UpdateField<uint8, 0, 26> ClassId;
    UpdateField<uint8, 0, 27> PlayerClassId;
    UpdateField<uint8, 0, 28> Sex;
    UpdateField<uint8, 0, 29> DisplayPower;
    UpdateField<uint32, 0, 30> OverrideDisplayPowerID;
    UpdateField<int64, 0, 31> Health;
    UpdateField<int64, 32, 33> MaxHealth;
    UpdateField<int32, 32, 34> Level;
    UpdateField<int32, 32, 35> EffectiveLevel;
    UpdateField<int32, 32, 36> ContentTuningID;
    UpdateField<int32, 32, 37> ScalingLevelMin;
    UpdateField<int32, 32, 38> ScalingLevelMax;
    UpdateField<int32, 32, 39> ScalingLevelDelta;
    UpdateField<int32, 32, 40> ScalingFactionGroup;
    UpdateField<int32, 32, 41> ScalingHealthItemLevelCurveID;
    UpdateField<int32, 32, 42> ScalingDamageItemLevelCurveID;
    UpdateField<int32, 32, 43> FactionTemplate;
    struct FactionTemplateTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 32, 44> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 45> Flags2;
    UpdateField<uint32, 32, 46> Flags3;
    UpdateField<uint32, 32, 47> AuraState;
    struct AuraStateTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 48> RangedAttackRoundBaseTime;
    UpdateField<float, 32, 49> BoundingRadius;
    UpdateField<float, 32, 50> CombatReach;
    UpdateField<float, 32, 51> DisplayScale;
    UpdateField<int32, 32, 52> CreatureFamily;
    UpdateField<int32, 32, 53> CreatureType;
    UpdateField<int32, 32, 54> NativeDisplayID;
    UpdateField<float, 32, 55> NativeXDisplayScale;
    UpdateField<int32, 32, 56> MountDisplayID;
    UpdateField<int32, 32, 57> CosmeticMountDisplayID;
    UpdateField<float, 32, 58> MinDamage;
    UpdateField<float, 32, 59> MaxDamage;
    UpdateField<float, 32, 60> MinOffHandDamage;
    UpdateField<float, 32, 61> MaxOffHandDamage;
    UpdateField<uint8, 32, 62> StandState;
    UpdateField<uint8, 32, 63> PetTalentPoints;
    UpdateField<uint8, 64, 65> VisFlags;
    UpdateField<uint8, 64, 66> AnimTier;
    UpdateField<uint32, 64, 67> PetNumber;
    UpdateField<uint32, 64, 68> PetNameTimestamp;
    UpdateField<uint32, 64, 69> PetExperience;
    UpdateField<uint32, 64, 70> PetNextLevelExperience;
    UpdateField<float, 64, 71> ModCastingSpeed;
    UpdateField<float, 64, 72> ModCastingSpeedNeg;
    UpdateField<float, 64, 73> ModSpellHaste;
    UpdateField<float, 64, 74> ModHaste;
    UpdateField<float, 64, 75> ModRangedHaste;
    UpdateField<float, 64, 76> ModHasteRegen;
    UpdateField<float, 64, 77> ModTimeRate;
    UpdateField<float, 64, 78> UnkDFFloat1;
    UpdateField<float, 64, 79> UnkDFFloat2;
    UpdateField<float, 64, 80> UnkDFFloat3;
    UpdateField<float, 64, 81> UnkDFFloat4;
    UpdateField<int32, 64, 82> CreatedBySpell;
    UpdateField<int32, 64, 83> EmoteState;
    UpdateField<int32, 64, 84> BaseMana;
    UpdateField<int32, 64, 85> BaseHealth;
    UpdateField<uint8, 64, 86> SheatheState;
    UpdateField<uint8, 64, 87> PvpFlags;
    struct PvpFlagsTag : ViewerDependentValueTag<uint8> {};
    UpdateField<uint8, 64, 88> PetFlags;
    UpdateField<uint8, 64, 89> ShapeshiftForm;
    UpdateField<int32, 64, 90> AttackPower;
    UpdateField<int32, 64, 91> AttackPowerModPos;
    UpdateField<int32, 64, 92> AttackPowerModNeg;
    UpdateField<float, 64, 93> AttackPowerMultiplier;
    UpdateField<int32, 64, 94> RangedAttackPower;
    UpdateField<int32, 64, 95> RangedAttackPowerModPos;
    UpdateField<int32, 96, 97> RangedAttackPowerModNeg;
    UpdateField<float, 96, 98> RangedAttackPowerMultiplier;
    UpdateField<int32, 96, 99> MainHandWeaponAttackPower;
    UpdateField<int32, 96, 100> OffHandWeaponAttackPower;
    UpdateField<int32, 96, 101> RangedWeaponAttackPower;
    UpdateField<int32, 96, 102> SetAttackSpeedAura;
    UpdateField<float, 96, 103> Lifesteal;
    UpdateField<float, 96, 104> MinRangedDamage;
    UpdateField<float, 96, 105> MaxRangedDamage;
    UpdateField<float, 96, 106> ManaCostMultiplier;
    UpdateField<float, 96, 107> MaxHealthModifier;
    UpdateField<float, 96, 108> HoverHeight;
    UpdateField<int32, 96, 109> MinItemLevelCutoff;
    UpdateField<int32, 96, 110> MinItemLevel;
    UpdateField<int32, 96, 111> MaxItemLevel;
    UpdateField<int32, 96, 112> AzeriteItemLevel;
    UpdateField<int32, 96, 113> WildBattlePetLevel;
    UpdateField<int32, 96, 114> BattlePetCompanionExperience;
    UpdateField<uint32, 96, 115> BattlePetCompanionNameTimestamp;
    UpdateField<int32, 96, 116> InteractSpellID;
    UpdateField<int32, 96, 117> ScaleDuration;
    UpdateField<int32, 96, 118> LooksLikeMountID;
    UpdateField<int32, 96, 119> LooksLikeCreatureID;
    UpdateField<int32, 96, 120> LookAtControllerID;
    UpdateField<int32, 96, 121> TaxiNodesID;
    UpdateField<ObjectGuid, 96, 122> GuildGUID;
    UpdateField<uint32, 96, 123> SilencedSchoolMask;
    UpdateField<uint32, 96, 124> UnkDFInt;
    UpdateField<ObjectGuid, 96, 125> NameplateAttachToGUID;                     // When set, nameplate of this unit will instead appear on that object
    UpdateFieldArray<uint32, 2, 126, 127> NpcFlags;
    struct NpcFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateFieldArray<int32, 7, 129, 130> Power;
    UpdateFieldArray<int32, 7, 129, 137> MaxPower;
    UpdateFieldArray<float, 7, 129, 144> PowerRegenFlatModifier;
    UpdateFieldArray<float, 7, 129, 151> PowerRegenInterruptedFlatModifier;
    UpdateFieldArray<UF::VisibleItem, 3, 158, 159> VirtualItems;
    UpdateFieldArray<uint32, 2, 162, 163> AttackRoundBaseTime;
    UpdateFieldArray<int32, 4, 165, 166> Stats;
    UpdateFieldArray<int32, 4, 165, 170> StatPosBuff;
    UpdateFieldArray<int32, 4, 165, 174> StatNegBuff;
    UpdateFieldArray<int32, 7, 178, 179> Resistances;
    UpdateFieldArray<int32, 7, 178, 186> BonusResistanceMods;
    UpdateFieldArray<int32, 7, 178, 193> ManaCostModifier;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Unit const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ChrCustomizationChoice : public IsUpdateFieldStructureTag
{
    uint32 ChrCustomizationOptionID;
    uint32 ChrCustomizationChoiceID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(ChrCustomizationChoice const& right) const;
    bool operator!=(ChrCustomizationChoice const& right) const { return !(*this == right); }
};

struct QuestLog : public IsUpdateFieldStructureTag, public HasChangesMask<31>
{
    UpdateField<int32, 0, 1> QuestID;
    UpdateField<uint32, 0, 2> StateFlags;
    UpdateField<uint32, 0, 3> EndTime;
    UpdateField<uint32, 0, 4> AcceptTime;
    UpdateField<uint32, 0, 5> ObjectiveFlags;
    UpdateFieldArray<int16, 24, 6, 7> ObjectiveProgress;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArenaCooldown : public IsUpdateFieldStructureTag, public HasChangesMask<8>
{
    UpdateField<int32, 0, 1> SpellID;
    UpdateField<int32, 0, 2> Charges;
    UpdateField<uint32, 0, 3> Flags;
    UpdateField<uint32, 0, 4> StartTime;
    UpdateField<uint32, 0, 5> EndTime;
    UpdateField<uint32, 0, 6> NextChargeTime;
    UpdateField<uint8, 0, 7> MaxCharges;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CTROptions : public IsUpdateFieldStructureTag
{
    int32 ContentTuningConditionMask;
    uint32 Field_4;
    uint32 ExpansionLevelMask;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CTROptions const& right) const;
    bool operator!=(CTROptions const& right) const { return !(*this == right); }
};

struct PlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<188>
{
    UpdateField<bool, 0, 1> HasQuestSession;
    UpdateField<bool, 0, 2> HasLevelLink;
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 3> Customizations;
    DynamicUpdateField<UF::QuestLog, 0, 4> QuestSessionQuestLog;
    DynamicUpdateField<UF::ArenaCooldown, 0, 5> ArenaCooldowns;
    UpdateField<ObjectGuid, 0, 6> DuelArbiter;
    UpdateField<ObjectGuid, 0, 7> WowAccount;
    UpdateField<ObjectGuid, 0, 8> LootTargetGUID;
    UpdateField<uint32, 0, 9> PlayerFlags;
    UpdateField<uint32, 0, 10> PlayerFlagsEx;
    UpdateField<uint32, 0, 11> GuildRankID;
    UpdateField<uint32, 0, 12> GuildDeleteDate;
    UpdateField<int32, 0, 13> GuildLevel;
    UpdateField<uint8, 0, 14> PartyType;
    UpdateField<uint8, 0, 15> NativeSex;
    UpdateField<uint8, 0, 16> Inebriation;
    UpdateField<uint8, 0, 17> PvpTitle;
    UpdateField<uint8, 0, 18> ArenaFaction;
    UpdateField<uint32, 0, 19> DuelTeam;
    UpdateField<int32, 0, 20> GuildTimeStamp;
    UpdateField<int32, 0, 21> PlayerTitle;
    UpdateField<int32, 0, 22> FakeInebriation;
    UpdateField<uint32, 0, 23> VirtualPlayerRealm;
    UpdateField<uint32, 0, 24> CurrentSpecID;
    UpdateField<int32, 0, 25> TaxiMountAnimKitID;
    UpdateField<uint8, 0, 26> CurrentBattlePetBreedQuality;
    UpdateField<int32, 0, 27> HonorLevel;
    UpdateField<int32, 0, 28> Field_B0;
    UpdateField<int32, 0, 29> Field_B4;
    UpdateField<UF::CTROptions, 0, 30> CtrOptions;
    UpdateField<int32, 0, 31> CovenantID;
    UpdateField<int32, 32, 33> SoulbindID;
    UpdateField<WorldPackets::MythicPlus::DungeonScoreSummary, 32, 34> DungeonScore;
    UpdateFieldArray<UF::QuestLog, 125, 35, 36> QuestLog;
    UpdateFieldArray<UF::VisibleItem, 19, 161, 162> VisibleItems;
    UpdateFieldArray<float, 6, 181, 182> AvgItemLevel;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
    bool IsQuestLogChangesMaskSkipped() const { return false; } // bandwidth savings aren't worth the cpu time
};

struct SkillInfo : public IsUpdateFieldStructureTag, public HasChangesMask<1793>
{
    UpdateFieldArray<uint16, 256, 0, 1> SkillLineID;
    UpdateFieldArray<uint16, 256, 0, 257> SkillStep;
    UpdateFieldArray<uint16, 256, 0, 513> SkillRank;
    UpdateFieldArray<uint16, 256, 0, 769> SkillStartingRank;
    UpdateFieldArray<uint16, 256, 0, 1025> SkillMaxRank;
    UpdateFieldArray<int16, 256, 0, 1281> SkillTempBonus;
    UpdateFieldArray<uint16, 256, 0, 1537> SkillPermBonus;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct RestInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<uint32, 0, 1> Threshold;
    UpdateField<uint8, 0, 2> StateID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PVPInfo : public IsUpdateFieldStructureTag, public HasChangesMask<19>
{
    UpdateField<bool, 0, 1> Disqualified;
    UpdateField<uint8, 0, 2> UnkDF1;
    UpdateField<uint32, 0, 3> WeeklyPlayed;
    UpdateField<uint32, 0, 4> WeeklyWon;
    UpdateField<uint32, 0, 5> SeasonPlayed;
    UpdateField<uint32, 0, 6> SeasonWon;
    UpdateField<uint32, 0, 7> Rating;
    UpdateField<uint32, 0, 8> WeeklyBestRating;
    UpdateField<uint32, 0, 9> SeasonBestRating;
    UpdateField<uint32, 0, 10> PvpTierID;
    UpdateField<uint32, 0, 11> WeeklyBestWinPvpTierID;
    UpdateField<uint32, 0, 12> Field_28;
    UpdateField<uint32, 0, 13> Field_2C;
    UpdateField<uint32, 0, 14> Unkdf1;
    UpdateField<uint32, 0, 15> Unkdf2;
    UpdateField<uint32, 0, 16> Unkdf3;
    UpdateField<uint32, 0, 17> Unkdf4;
    UpdateField<uint32, 0, 18> Unkdf5;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CharacterRestriction : public IsUpdateFieldStructureTag
{
    int32 Field_0;
    int32 Field_4;
    int32 Field_8;
    uint32 Type;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CharacterRestriction const& right) const;
    bool operator!=(CharacterRestriction const& right) const { return !(*this == right); }
};

struct SpellPctModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    float ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellPctModByLabel const& right) const;
    bool operator!=(SpellPctModByLabel const& right) const { return !(*this == right); }
};

struct SpellFlatModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    int32 ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellFlatModByLabel const& right) const;
    bool operator!=(SpellFlatModByLabel const& right) const { return !(*this == right); }
};

struct Research : public IsUpdateFieldStructureTag
{
    int16 ResearchProjectID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(Research const& right) const;
    bool operator!=(Research const& right) const { return !(*this == right); }
};

struct MawPower : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 MawPowerID;
    int32 Amount;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(MawPower const& right) const;
    bool operator!=(MawPower const& right) const { return !(*this == right); }
};

struct MultiFloorExplore : public IsUpdateFieldStructureTag
{
    std::vector<int32> WorldMapOverlayIDs;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(MultiFloorExplore const& right) const;
    bool operator!=(MultiFloorExplore const& right) const { return !(*this == right); }
};

struct RecipeProgressionInfo : public IsUpdateFieldStructureTag
{
    uint16 RecipeProgressionGroupID;
    uint16 Experience;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(RecipeProgressionInfo const& right) const;
    bool operator!=(RecipeProgressionInfo const& right) const { return !(*this == right); }
};

struct ActivePlayerUnk901 : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<ObjectGuid, 0, 1> Field_0;
    UpdateField<int32, 0, 2> Field_10;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct QuestSession : public IsUpdateFieldStructureTag, public HasChangesMask<878>
{
    UpdateField<ObjectGuid, 0, 1> Owner;
    UpdateFieldArray<uint64, 875, 2, 3> QuestCompleted;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ReplayedQuest : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<int32, 0, 1> QuestID;
    UpdateField<uint32, 0, 2> ReplayTime;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CharacterTrait : public IsUpdateFieldStructureTag
{
    int32 Dword0;
    int32 Dword108;
    int32 Amount;
    int32 Dword148;
    int32 Dword14C;
    int32 Dword150;
    int32 Dword154;
    int32 Dword158;
    std::string UnkStr;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CharacterTrait const& right) const;
    bool operator!=(CharacterTrait const& right) const { return !(*this == right); }
};

struct ActivePlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<1569>
{
    UpdateField<bool, 0, 1> BackpackAutoSortDisabled;
    UpdateField<bool, 0, 2> BankAutoSortDisabled;
    UpdateField<bool, 0, 3> SortBagsRightToLeft;
    UpdateField<bool, 0, 4> InsertItemsLeftToRight;
    UpdateFieldArray<DynamicUpdateFieldBase<UF::Research>, 1, 29, 30> Research;
    DynamicUpdateField<uint64, 0, 5> KnownTitles;
    DynamicUpdateField<uint16, 0, 7> ResearchSites;
    DynamicUpdateField<uint32, 0, 8> ResearchSiteProgress;
    DynamicUpdateField<int32, 0, 9> DailyQuestsCompleted;
    DynamicUpdateField<int32, 0, 10> AvailableQuestLineXQuestIDs;
    DynamicUpdateField<int32, 0, 11> Heirlooms;
    DynamicUpdateField<uint32, 0, 12> HeirloomFlags;
    DynamicUpdateField<int32, 0, 13> Toys;
    DynamicUpdateField<uint32, 0, 14> ToyFlags;
    DynamicUpdateField<uint32, 0, 15> Transmog;
    DynamicUpdateField<int32, 0, 16> ConditionalTransmog;
    DynamicUpdateField<int32, 0, 17> SelfResSpells;
    DynamicUpdateField<uint32, 0, 18> RuneforgePowers;
    DynamicUpdateField<uint32, 0, 19> TransmogIllusions;
    DynamicUpdateField<UF::SpellPctModByLabel, 0, 21> SpellPctModByLabel;
    DynamicUpdateField<UF::SpellFlatModByLabel, 0, 22> SpellFlatModByLabel;
    DynamicUpdateField<UF::MawPower, 0, 23> MawPowers;
    DynamicUpdateField<UF::MultiFloorExplore, 0, 24> MultiFloorExploration;
    DynamicUpdateField<UF::RecipeProgressionInfo, 0, 25> RecipeProgression;
    DynamicUpdateField<UF::ReplayedQuest, 0, 26> ReplayedQuests;
    DynamicUpdateField<int32, 0, 27> DisabledSpells;
    DynamicUpdateField<UF::PVPInfo, 0, 6> PvpInfo;
    DynamicUpdateField<UF::CharacterRestriction, 0, 20> CharacterRestrictions;
    DynamicUpdateField<UF::CharacterTrait, 0, 28> CharacterTraits;
    UpdateField<ObjectGuid, 0, 31> FarsightObject;
    UpdateField<ObjectGuid, 0, 32> SummonedBattlePetGUID;
    UpdateField<uint64, 0, 33> Coinage;
    UpdateField<int32, 34, 35> XP;
    UpdateField<int32, 34, 36> NextLevelXP;
    UpdateField<int32, 34, 37> TrialXP;
    UpdateField<UF::SkillInfo, 34, 38> Skill;
    UpdateField<int32, 34, 39> CharacterPoints;
    UpdateField<int32, 34, 40> MaxTalentTiers;
    UpdateField<uint32, 34, 41> TrackCreatureMask;
    UpdateField<float, 34, 42> MainhandExpertise;
    UpdateField<float, 34, 43> OffhandExpertise;
    UpdateField<float, 34, 44> RangedExpertise;
    UpdateField<float, 34, 45> CombatRatingExpertise;
    UpdateField<float, 34, 46> BlockPercentage;
    UpdateField<float, 34, 47> DodgePercentage;
    UpdateField<float, 34, 48> DodgePercentageFromAttribute;
    UpdateField<float, 34, 49> ParryPercentage;
    UpdateField<float, 34, 50> ParryPercentageFromAttribute;
    UpdateField<float, 34, 51> CritPercentage;
    UpdateField<float, 34, 52> RangedCritPercentage;
    UpdateField<float, 34, 53> OffhandCritPercentage;
    UpdateField<float, 34, 54> SpellCritPercentage;
    UpdateField<int32, 34, 55> ShieldBlock;
    UpdateField<float, 34, 56> ShieldBlockCritPercentage;
    UpdateField<float, 34, 57> Mastery;
    UpdateField<float, 34, 58> Speed;
    UpdateField<float, 34, 59> Avoidance;
    UpdateField<float, 34, 60> Sturdiness;
    UpdateField<int32, 34, 61> Versatility;
    UpdateField<float, 34, 62> VersatilityBonus;
    UpdateField<float, 34, 63> PvpPowerDamage;
    UpdateField<float, 34, 64> PvpPowerHealing;
    UpdateField<int32, 34, 65> ModHealingDonePos;
    UpdateField<float, 66, 67> ModHealingPercent;
    UpdateField<float, 66, 68> ModPeriodicHealingDonePercent;
    UpdateField<float, 66, 69> ModSpellPowerPercent;
    UpdateField<float, 66, 70> ModResiliencePercent;
    UpdateField<float, 66, 71> OverrideSpellPowerByAPPercent;
    UpdateField<float, 66, 72> OverrideAPBySpellPowerPercent;
    UpdateField<int32, 66, 73> ModTargetResistance;
    UpdateField<int32, 66, 74> ModTargetPhysicalResistance;
    UpdateField<uint32, 66, 75> LocalFlags;
    UpdateField<uint8, 66, 76> GrantableLevels;
    UpdateField<uint8, 66, 77> MultiActionBars;
    UpdateField<uint8, 66, 78> LifetimeMaxRank;
    UpdateField<uint8, 66, 79> NumRespecs;
    UpdateField<uint32, 66, 80> PvpMedals;
    UpdateField<uint16, 66, 81> TodayHonorableKills;
    UpdateField<uint16, 66, 82> YesterdayHonorableKills;
    UpdateField<uint32, 66, 83> LifetimeHonorableKills;
    UpdateField<int32, 66, 84> WatchedFactionIndex;
    UpdateField<int32, 66, 85> MaxLevel;
    UpdateField<int32, 66, 86> ScalingPlayerLevelDelta;
    UpdateField<int32, 66, 87> MaxCreatureScalingLevel;
    UpdateField<int32, 66, 88> PetSpellPower;
    UpdateField<float, 66, 89> UiHitModifier;
    UpdateField<float, 66, 90> UiSpellHitModifier;
    UpdateField<int32, 66, 91> HomeRealmTimeOffset;
    UpdateField<float, 66, 92> ModPetHaste;
    UpdateField<int8, 66, 93> JailersTowerLevelMax;
    UpdateField<int8, 66, 94> JailersTowerLevel;
    UpdateField<uint8, 66, 95> LocalRegenFlags;
    UpdateField<uint8, 66, 96> AuraVision;
    UpdateField<uint8, 66, 97> NumBackpackSlots;
    UpdateField<int32, 98, 99> OverrideSpellsID;
    UpdateField<uint16, 98, 100> LootSpecID;
    UpdateField<uint32, 98, 101> OverrideZonePVPType;
    UpdateField<ObjectGuid, 98, 102> BnetAccount;
    UpdateField<uint64, 98, 103> GuildClubMemberID;
    UpdateField<int32, 98, 104> Honor;
    UpdateField<int32, 98, 105> HonorNextLevel;
    UpdateField<uint8, 98, 106> NumBankSlots;
    UpdateField<UF::ActivePlayerUnk901, 98, 108> Field_1410;
    OptionalUpdateField<UF::QuestSession, 98, 107> QuestSession;
    UpdateField<int32, 98, 109> UiChromieTimeExpansionID;
    UpdateField<int32, 98, 110> TransportServerTime;
    UpdateField<uint32, 98, 111> WeeklyRewardsPeriodSinceOrigin;                // week count since Cfg_RegionsEntry::ChallengeOrigin
    UpdateField<int16, 98, 112> DEBUGSoulbindConduitRank;
    UpdateField<uint32, 98, 113> UnkDF;
    UpdateField<WorldPackets::MythicPlus::DungeonScoreData, 98, 114> DungeonScore;
    UpdateFieldArray<ObjectGuid, 218, 115, 116> InvSlots;
    UpdateFieldArray<uint64, 240, 334, 335> ExploredZones;
    UpdateFieldArray<UF::RestInfo, 2, 575, 576> RestInfo;
    UpdateFieldArray<int32, 7, 578, 579> ModDamageDonePos;
    UpdateFieldArray<int32, 7, 578, 586> ModDamageDoneNeg;
    UpdateFieldArray<float, 7, 578, 593> ModDamageDonePercent;
    UpdateFieldArray<float, 7, 578, 600> ModHealingDonePercent;
    UpdateFieldArray<float, 3, 607, 608> WeaponDmgMultipliers;
    UpdateFieldArray<float, 3, 607, 611> WeaponAtkSpeedMultipliers;
    UpdateFieldArray<uint32, 12, 614, 615> BuybackPrice;
    UpdateFieldArray<int64, 12, 614, 627> BuybackTimestamp;
    UpdateFieldArray<int32, 32, 639, 640> CombatRatings;
    UpdateFieldArray<uint32, 4, 672, 673> NoReagentCostMask;
    UpdateFieldArray<int32, 2, 677, 678> ProfessionSkillLine;
    UpdateFieldArray<uint32, 4, 680, 681> BagSlotFlags;
    UpdateFieldArray<uint32, 7, 685, 686> BankBagSlotFlags;
    UpdateFieldArray<uint64, 875, 693, 694> QuestCompleted;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct GameObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<21>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<int32, 0, 2> EnableDoodadSets;
    UpdateField<int32, 0, 3> DisplayID;
    UpdateField<uint32, 0, 4> SpellVisualID;
    UpdateField<uint32, 0, 5> StateSpellVisualID;
    UpdateField<uint32, 0, 6> SpawnTrackingStateAnimID;
    UpdateField<uint32, 0, 7> SpawnTrackingStateAnimKitID;
    UpdateField<uint32, 0, 8> StateWorldEffectsQuestObjectiveID;
    UpdateField<ObjectGuid, 0, 9> CreatedBy;
    UpdateField<ObjectGuid, 0, 10> GuildGUID;
    UpdateField<uint32, 0, 11> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<QuaternionData, 0, 12> ParentRotation;
    UpdateField<int32, 0, 13> FactionTemplate;
    UpdateField<int8, 0, 14> State;
    UpdateField<int8, 0, 15> TypeID;
    UpdateField<uint8, 0, 16> PercentHealth;
    UpdateField<uint32, 0, 17> ArtKit;
    UpdateField<uint32, 0, 18> CustomParam;
    UpdateField<int32, 0, 19> Level;
    UpdateField<uint32, 0, 20> AnimGroupInstance;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, GameObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DynamicObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<ObjectGuid, 0, 1> Caster;
    UpdateField<uint8, 0, 2> Type;
    UpdateField<UF::SpellCastVisual, 0, 3> SpellVisual;
    UpdateField<int32, 0, 4> SpellID;
    UpdateField<float, 0, 5> Radius;
    UpdateField<uint32, 0, 6> CastTime;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, DynamicObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CorpseData : public IsUpdateFieldStructureTag, public HasChangesMask<33>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    UpdateField<uint32, 0, 2> DynamicFlags;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> PartyGUID;
    UpdateField<ObjectGuid, 0, 5> GuildGUID;
    UpdateField<uint32, 0, 6> DisplayID;
    UpdateField<uint8, 0, 7> RaceID;
    UpdateField<uint8, 0, 8> Sex;
    UpdateField<uint8, 0, 9> Class;
    UpdateField<uint32, 0, 10> Flags;
    UpdateField<int32, 0, 11> FactionTemplate;
    UpdateField<uint32, 0, 12> StateSpellVisualKitID;
    UpdateFieldArray<uint32, 19, 13, 14> Items;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Corpse const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ScaleCurve : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> OverrideActive;
    UpdateField<uint32, 0, 2> StartTimeOffset;
    UpdateField<uint32, 0, 3> ParameterCurve;
    UpdateFieldArray<TaggedPosition<Position::XY>, 2, 4, 5> Points;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct VisualAnim : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<bool, 0, 1> Field_C;
    UpdateField<uint32, 0, 2> AnimationDataID;
    UpdateField<uint32, 0, 3> AnimKitID;
    UpdateField<uint32, 0, 4> AnimProgress;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AreaTriggerData : public IsUpdateFieldStructureTag, public HasChangesMask<18>
{
    UpdateField<UF::ScaleCurve, 0, 1> OverrideScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 2> ExtraScaleCurve;
    UpdateField<ObjectGuid, 0, 3> Caster;
    UpdateField<uint32, 0, 4> Duration;
    UpdateField<uint32, 0, 5> TimeToTarget;
    UpdateField<uint32, 0, 6> TimeToTargetScale;
    UpdateField<uint32, 0, 7> TimeToTargetExtraScale;
    UpdateField<int32, 0, 8> SpellID;
    UpdateField<int32, 0, 9> SpellForVisuals;
    UpdateField<UF::SpellCastVisual, 0, 10> SpellVisual;
    UpdateField<float, 0, 11> BoundsRadius2D;
    UpdateField<uint32, 0, 12> DecalPropertiesID;
    UpdateField<ObjectGuid, 0, 13> CreatingEffectGUID;
    UpdateField<uint32, 0, 14> Field_80;
    UpdateField<uint32, 0, 15> Field_84;
    UpdateField<ObjectGuid, 0, 16> TargetGUID;
    UpdateField<UF::VisualAnim, 0, 17> VisualAnim;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct SceneObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ScriptPackageID;
    UpdateField<uint32, 0, 2> RndSeedVal;
    UpdateField<ObjectGuid, 0, 3> CreatedBy;
    UpdateField<uint32, 0, 4> SceneType;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ConversationLine : public IsUpdateFieldStructureTag
{
    int32 ConversationLineID;
    uint32 StartTime;
    struct StartTimeTag : ViewerDependentValueTag<uint32> {};
    int32 UiCameraID;
    uint8 ActorIndex;
    uint8 Flags;
    uint8 ChatType;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationLine const& right) const;
    bool operator!=(ConversationLine const& right) const { return !(*this == right); }
};

struct ConversationActor : public IsUpdateFieldStructureTag
{
    uint32 CreatureID;
    uint32 CreatureDisplayInfoID;
    ObjectGuid ActorGUID;
    int32 Id;
    uint32 Type;
    uint32 NoActorObject;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationActor const& right) const;
    bool operator!=(ConversationActor const& right) const { return !(*this == right); }
};

struct ConversationData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> DontPlayBroadcastTextSounds;
    UpdateField<std::vector<UF::ConversationLine>, 0, 2> Lines;
    DynamicUpdateField<UF::ConversationActor, 0, 3> Actors;
    UpdateField<int32, 0, 4> LastLineEndTime;
    struct LastLineEndTimeTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 5> Progress;
    UpdateField<uint32, 0, 6> Flags;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Conversation const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

}

#endif // UpdateFields_h__
